const add1 = (a,b) =>console.log(a+b);
add1(2,5)

// Curring is partial application with 1 parameter only
const add2 = a => b =>console.log(a+b);
add2(2)(5)

// Partial Application allows you to apply part of a function to get the results and use it to finish its function

// ---------------------------------------------------------

// Litteraly backwards: goh angasal a m'I
console.log("I'm a lasagna hog".split('').reverse().join(''))

// -----------------------------------------------------------

const widow = {
	foo: '',
	bar: ''
}

// This is so because the 1st argument is false so the second argument is short circuited to be bar
console.log((widow.foo||(widow.foo = 'bar')))

// -----------------------------------------------------------

var foo = 'hello';
(function(){
var bar = 'world';
alert(foo+bar)
})();
// alert(foo+bar)

// The anonymous function immediately calls the inner function. resulting in helloworld and a missed chance for the second alert